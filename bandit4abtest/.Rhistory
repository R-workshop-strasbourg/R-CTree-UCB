library(roxygen2)
library(bandit4abtest)
?bandit4abtest
?generate_Matrix_S
K = 2
generate_Matrix_S(K)
library(bandit4abtest)
K = 2
generate_Matrix_S(K)
library(bandit4abtest)
K = 2
generate_Matrix_S(K)
1%%2
2%%1
library(bandit4abtest)
?play_arm
set.seed(4434)
K1 <- rbinom(1000, 1, 0.6)
K2 <- rbinom(1000, 1, 0.7)
visitorReward <- as.data.frame( cbind(K1,K2) )
K=2
S <- generate_Matrix_S(K)
S
for(i in 1:nrow(visitorReward)){
S <- play_arm(i,arm=(i%%K+1),S,visitorReward)
}
S
library(bandit4abtest)
?play_arm
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rbinom(1000, 1, 0.6)
K2 <- rbinom(1000, 1, 0.7)
## Define a dataframe of rewards
visitorReward <- as.data.frame( cbind(K1,K2) )
## Number of arms
K=2
## Init the S Matrix
S <- generate_Matrix_S(K)
S
## play arms uniformly
for(i in 1:nrow(visitorReward)){
S <- play_arm(i,arm=(i%%K+1),S,visitorReward)
}
## Results
S
library(bandit4abtest)
?proba_max_For_UCB
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rbinom(1000, 1, 0.6)
K2 <- rbinom(1000, 1, 0.7)
## Define a dataframe of rewards
visitorReward <- as.data.frame( cbind(K1,K2) )
## Number of arms
K=2
## Init the S Matrix
S <- generate_Matrix_S(K)
S
## play arms uniformly
for(i in 1:nrow(visitorReward)){
S <- play_arm(i,arm=(i%%K+1),S,visitorReward)
}
## Results
S
proba_max_For_UCB(S=S,iter=i+1)
library(bandit4abtest)
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rbinom(1000, 1, 0.6)
K2 <- rbinom(1000, 1, 0.7)
## Define a dataframe of rewards
visitorReward <- as.data.frame( cbind(K1,K2) )
## Number of arms
K=2
## Init the S Matrix
S <- generate_Matrix_S(K)
S
## play arms uniformly
for(i in 1:nrow(visitorReward)){
S <- play_arm(i,arm=(i%%K+1),S,visitorReward)
}
## Results
S
proba_max_For_UCB(S=S,iter=i+1)
library(bandit4abtest)
?condition_For_UCB
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rbinom(1000, 1, 0.6)
K2 <- rbinom(1000, 1, 0.7)
## Define a dataframe of rewards
visitorReward <- as.data.frame( cbind(K1,K2) )
## Number of arms
K=2
## Init the S Matrix
S <- generate_Matrix_S(K)
S
## play arms uniformly
for(i in 1:nrow(visitorReward)){
S <- play_arm(i,arm=(i%%K+1),S,visitorReward)
}
## Results
S
proba_max_For_UCB(S=S,iter=i+1)
condition_For_UCB(S=S,iter=i+1)
library(bandit4abtest)
?change_type
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rbinom(1000, 1, 0.6)
K2 <- rbinom(1000, 1, 0.7)
## Define a dataframe of rewards
visitorReward <- as.data.frame( cbind(as.factor(K1),as.factor(K2)) )
typeof(visitorReward[,1])
## Change type
visitorReward <- change_type(visitorReward)
typeof(visitorReward[,1])
library(bandit4abtest)
?change_type
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rbinom(1000, 1, 0.6)
K2 <- rbinom(1000, 1, 0.7)
## Define a dataframe of rewards
visitorReward <- as.data.frame( cbind(as.character(K1),as.character(K2)) )
typeof(visitorReward[,1])
## Change type
visitorReward <- change_type(visitorReward)
typeof(visitorReward[,1])
as.character(K1)
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rbinom(1000, 1, 0.6)
K2 <- rbinom(1000, 1, 0.7)
## Define a dataframe of rewards
visitorReward <- as.data.frame( cbind(as.character(K1),as.character(K2)) )
?condition_For_UCB
library(bandit4abtest)
?regretValue
set.seed(4434)
K1 <- rnorm(100, 30, .05)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
#regret of arm 1 for the fist item
regretValue(1,vvec_visitorReward[1,])
#'#regret of arm 1 for the fist item
regretValue(2,vvec_visitorReward[2,])
library(bandit4abtest)
?regretValue
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rnorm(100, 30, .05)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
#regret of arm 1 for the fist item
regretValue(1,vec_visitorReward[1,])
#'#regret of arm 1 for the fist item
regretValue(2,vec_visitorReward[2,])
library(bandit4abtest)
?regretValue
set.seed(4434)
K1 <- rnorm(100, 30, .05)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
#regret of arm 1 for the fist item
regretValue(1,visitorReward[1,])
#'#regret of arm 1 for the fist item
regretValue(2,visitorReward[1,])
library(bandit4abtest)
set.seed(4434)
K1 <- rnorm(100, 30, .05)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
#regret of arm 1 for the fist item
regretValue(1,visitorReward[1,])
#'#regret of arm 1 for the fist item
regretValue(2,visitorReward[1,])
sample(c(1,2), 100, replace = TRUE)
library(bandit4abtest)
?simpleRegret
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rnorm(100, 30, .05)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
#Random choices
choice <- sample(c(1,2), 100, replace = TRUE)
simpleRegret(choice=choice,visitorReward=visitorReward)
library(bandit4abtest)
?cumulativeRegret
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rnorm(100, 30, .05)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
#Random choices
choice <- sample(c(1,2), 100, replace = TRUE)
cumulativeRegret(choice=choice,visitorReward=visitorReward)
library(bandit4abtest)
?data_control_K
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rnorm(100, 30, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(K1)
##Control
data_control_K(visitorReward)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
##Control
data_control_K(visitorReward,K=3)
##Control
data_control_K(visitorReward,K=2)
library(bandit4abtest)
?data_control_K
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rnorm(100, 30, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(K1)
## Control
data_control_K(visitorReward)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
## Control
data_control_K(visitorReward,K=3)
## Control
data_control_K(visitorReward,K=2)
library(bandit4abtest)
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rnorm(100, 30, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(K1)
## Control
data_control_K(visitorReward)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
## Control
data_control_K(visitorReward,K=3)
## Control
data_control_K(visitorReward,K=2)
?control_data_missing
library(bandit4abtest)
?control_data_missing
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rnorm(100, 30, .05)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
## Control
visitorReward[1,1]= NA
## Control
control_data_missing(visitorReward,K=2)
library(bandit4abtest)
?control_data_missing
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rnorm(100, 30, .05)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
## Control
visitorReward[1,1]= NA
## Control
control_data_missing(visitorReward)
library(bandit4abtest)
?control_data_missing
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rnorm(100, 30, .05)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
## Control
control_data_missing(visitorReward)
visitorReward[1,1]= NA
## Control
control_data_missing(visitorReward)
library(bandit4abtest)
?UCB_control
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rnorm(100, 30, .05)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
## Control
UCB_control(visitorReward,K=3)
## Control
UCB_control(visitorReward,K=2)
visitorReward[1,1]= NA
## Control
UCB_control(visitorReward)
library(bandit4abtest)
?UCB_control
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rnorm(100, 30, .05)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
## Control
UCB_control(visitorReward,K=3)
## Control
UCB_control(visitorReward,K=2)
visitorReward[1,1]= NA
## Control
UCB_control(visitorReward)
library(bandit4abtest)
?data_control_K
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rnorm(100, 30, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(K1)
## Control
data_control_K(visitorReward)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
## Control
data_control_K(visitorReward,K=3)
## Control
data_control_K(visitorReward,K=2)
data_control_K(visitorReward)
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rnorm(100, 30, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(K1)
## Control
data_control_K(visitorReward)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
## Control
data_control_K(visitorReward,K=3)
## Control
data_control_K(visitorReward,K=2)
?control_data_missing
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rnorm(100, 30, .05)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
## Control
control_data_missing(visitorReward)
visitorReward[1,1]= NA
## Control
control_data_missing(visitorReward)
?UCB_control
## Generates 1000 numbers from 2 uniform distributions
set.seed(4434)
K1 <- rnorm(100, 30, .05)
K2 <- rnorm(100, 21, .05)
## Define a dataframe of rewards
visitorReward <- as.data.frame(cbind(K1,K2) )
## Control
UCB_control(visitorReward,K=3)
## Control
UCB_control(visitorReward,K=2)
visitorReward[1,1]= NA
## Control
UCB_control(visitorReward)
export(LINUCB)
export(LOGITUCB)
export(UCB)
export(bandit_reward_control)
export(change_data_type_for_ctree)
export(change_type)
export(condition_For_UCB)
export(condition_For_epsilonGreedy)
export(condition_For_thompson_sampling)
export(control_data_missing)
export(cumulativeRegret)
export(data_control_K)
export(data_control_context_reward)
export(epsilonGreedy)
export(epsilonGreedy_bandit_object_evaluation)
export(generate_Matrix_S)
export(is_reward_are_boolean)
export(linucb_bandit_object_evaluation)
export(logitucb_bandit_object_evaluation)
export(play_arm)
export(proba_max_For_UCB)
export(regretValue)
export(return_real_theta)
export(simpleRegret)
export(thompson_sampling)
export(thompson_sampling_bandit_object_evaluation)
export(ucb_bandit_object_evaluation)
export(uniform_bandit)
export(uniform_bandit_object_evaluation)
import(tictoc)
export(LINUCB)
export(LOGITUCB)
export(UCB)
export(bandit_reward_control)
export(change_data_type_for_ctree)
export(change_type)
export(condition_For_UCB)
export(condition_For_epsilonGreedy)
export(condition_For_thompson_sampling)
export(control_data_missing)
export(cumulativeRegret)
export(data_control_K)
export(data_control_context_reward)
export(epsilonGreedy)
export(epsilonGreedy_bandit_object_evaluation)
export(generate_Matrix_S)
export(is_reward_are_boolean)
export(linucb_bandit_object_evaluation)
export(logitucb_bandit_object_evaluation)
export(play_arm)
export(proba_max_For_UCB)
export(regretValue)
export(return_real_theta)
export(simpleRegret)
export(thompson_sampling)
export(thompson_sampling_bandit_object_evaluation)
export(ucb_bandit_object_evaluation)
export(uniform_bandit)
export(uniform_bandit_object_evaluation)
import(tictoc)
source("/home/manue/Documents/manue/Manipulation/datascience-emmanuelle/programme_R/bandit/xp ctree_ucb/xp_revue code public/Bandit/R/ctree_object_evaluation.R")
View(CTREE)
View(ctree_parameters_control_default)
#return time elaps
library(tictoc)
(WD <- getwd())
WD <- "/home/manue/Documents/manue/Manipulation/datascience-emmanuelle/programme_R/bandit/xp ctree_ucb/programme général/Bandit"
if (!is.null(WD)) setwd(WD)
source("R/ctree_parameters_control_default.R")
### control ###
#data controle : see ctree_control
source("R/ctree_control.R")
View(ctree_data_control)
View(ctree_data_control)
#Change the type of data
source("R/change_data_type_for_ctree.R")
View(change_data_type_for_ctree)
View(ctree_data_control)
source("/home/manue/Documents/manue/Manipulation/datascience-emmanuelle/programme_R/bandit/xp ctree_ucb/xp_revue code public/Bandit/R/ucb_bandit_object_evaluation.R")
source("/home/manue/Documents/manue/Manipulation/datascience-emmanuelle/programme_R/bandit/xp ctree_ucb/xp_revue code public/Bandit/R/ctree_object_evaluation.R")
View(plot_cum_regret_for_each_subgroupe)
### learning  ###
#Generate formula and tree
source("R/ctree_formula_generate.R")
View(ctree_formula_generate)
