geom_line(linetype="dashed",aes(y = ucb_bandit$cum_reg_ucb_alloc, col = "UCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = linucb_bandit$cum_reg_linucb, col = "LinUCB"),size = 0.5) +
#geom_line(linetype="dashed",aes(y = kernelucb_bandit$cum_reg_kernelucb_bandit_alloc, col = "KernelUCB"),size = 0.5) +
#geom_line(linetype="dashed",aes(y = thompson_bandit$cum_reg_ThompsonSampling_alloc, col = "Thompson Sampling"),size = 0.5) +
geom_line(linetype="dashed",aes(y = uniform_bandit$cum_reg_uniform_bandit_alloc, col = "Uniform"),size = 0.5) +
scale_colour_manual(values =  c("UCB"="brown","LinUCB"="blue","Ctreeucb"="green","Uniform"="black"))+
xlab("Time") +
ylab("Cumulative regret")
###Data format###
df  =  read.table("/home/manue/Documents/manue/GitHub/R-CTree-UCB/bandit4abtest/data/adult.data", sep = ",")  # read text file
df$V1 <- NULL
listCategorial =c("V2","V4","V6","V7","V8","V9")
listInteger  = c("V3","V5","V11","V12","V13")
visitorReward <- as.data.frame(transform_categorial_to_binary( listCategorial = c("V15"), dt=df))
for(i in 1:ncol(visitorReward)) visitorReward[,i] <- as.integer(visitorReward[,i])
###
dt <- df[, c(listCategorial,listInteger)]
dt$V15 <- NULL
#multiply the dataset (if Config 100_100)
#n <- 2
#dt <- do.call("rbind", replicate(n, dt, simplify = FALSE))
#visitorReward  <- do.call("rbind", replicate(n, visitorReward, simplify = FALSE))
dt.old <- dt
set.seed(1234)
####CTREEUCBPARAMETER
## - the size of the learning set is a percent of the all dataset nrow(dt)*0.3 or nrow(dt)*0.5
#  - mincriterion parameter refers to 1 -risk error accepted  (0.99,0.95,0.90)
#  - alpha refers to the dynamic allocation parameter (U.C.B)
#  - arm_for_learn is the original varitation (names(visitorReward)[1] or names(visitorReward)[2] ...or  names(visitorReward)[5] )
#  testtype and teststat is refer to type of test to build the tree (see the paper for more details)
# and are not supposed to be modified#
#Do not multiply the dataset if Config 30_70
#Config 30_70
learn_size = nrow(dt.old)*0.30
#multiply the dataset if Config 100_100
#Config 100_100
#learn_size = nrow(dt.old)*0.5
####CTREEUCBPARAMETER
## - the size of the learning set is already calculated according to the selected configuration (learn_size)
#  - mincriterion parameter refers to 1 -risk error accepted  (0.99,0.95,0.90)
#  - alpha refers to the dynamic allocation parameter (U.C.B)
#  - arm_for_learn is the original varitation (names(visitorReward)[1] or names(visitorReward)[2])
#  testtype and teststat is refer to type of test to build the tree (see the paper for more details)
# and are not supposed to be modified#
ctreeucb_parameters_control <- ctreeucb_parameters_control_default(dt = dt.old,
visitorReward ,
learn_size = learn_size,
alpha = 1,
arm_for_learn = names(visitorReward)[1],
is_reward_are_boolean = TRUE,
ctree_control_val=ctree_control(
mincriterion = 0.99,
testtype = "Teststatistic",
teststat = "quadratic",
splitstat = c( "quadratic"))
)
my_ctree_ucb <- ctreeucbBanditObjectEvaluation(dt= dt.old,visitor_reward=visitorReward, ctree_parameters_control= ctreeucb_parameters_control)
library(bandit4abtest)
library(partykit)
###Data format###
df  =  read.table("/home/manue/Documents/manue/GitHub/R-CTree-UCB/bandit4abtest/data/adult.data", sep = ",")  # read text file
df$V1 <- NULL
listCategorial =c("V2","V4","V6","V7","V8","V9")
library(bandit4abtest)
library(partykit)
###Data format###
df  =  read.table("/home/manue/Documents/manue/GitHub/R-CTree-UCB/bandit4abtest/data/adult.data", sep = ",")  # read text file
df$V1 <- NULL
listCategorial =c("V2","V4","V6","V7","V8","V9")
listInteger  = c("V3","V5","V11","V12","V13")
View(df)
visitorReward <- as.data.frame(transform_categorial_to_binary( listCategorial = c("V15"), dt=df))
for(i in 1:ncol(visitorReward)) visitorReward[,i] <- as.integer(visitorReward[,i])
###
dt <- df[, c(listCategorial,listInteger)]
dt$V15 <- NULL
#multiply the dataset (if Config 100_100)
n <- 2
dt <- do.call("rbind", replicate(n, dt, simplify = FALSE))
visitorReward  <- do.call("rbind", replicate(n, visitorReward, simplify = FALSE))
dt.old <- dt
set.seed(1234)
#multiply the dataset if Config 100_100
#Config 100_100
learn_size = nrow(dt.old)*0.5
ctreeucb_parameters_control <- ctreeucb_parameters_control_default(dt = dt.old,
visitorReward ,
learn_size = learn_size,
alpha = 1,
arm_for_learn = names(visitorReward)[1],
is_reward_are_boolean = TRUE,
ctree_control_val=ctree_control(
mincriterion = 0.99,
testtype = "Teststatistic",
teststat = "quadratic",
splitstat = c( "quadratic"))
)
my_ctree_ucb <- ctreeucbBanditObjectEvaluation(dt= dt.old,visitor_reward=visitorReward, ctree_parameters_control= ctreeucb_parameters_control)
library(bandit4abtest)
library(partykit)
###Data format###
df  =  read.table("/home/manue/Documents/manue/GitHub/R-CTree-UCB/bandit4abtest/data/adult.data", sep = ",")  # read text file
df$V1 <- NULL
listCategorial =c("V2","V4","V6","V7","V8","V9")
listInteger  = c("V3","V5","V11","V12","V13")
visitorReward <- as.data.frame(transform_categorial_to_binary( listCategorial = c("V15"), dt=df))
for(i in 1:ncol(visitorReward)) visitorReward[,i] <- as.integer(visitorReward[,i])
###
dt <- df[, c(listCategorial,listInteger)]
dt$V15 <- NULL
#multiply the dataset (if Config 100_100)
n <- 2
dt <- do.call("rbind", replicate(n, dt, simplify = FALSE))
visitorReward  <- do.call("rbind", replicate(n, visitorReward, simplify = FALSE))
dt.old <- dt
set.seed(1234)
#multiply the dataset if Config 100_100
#Config 100_100
learn_size = nrow(dt.old)*0.5
ctreeucb_parameters_control <- ctreeucb_parameters_control_default(dt = dt.old,
visitorReward ,
learn_size = learn_size,
alpha = 1,
arm_for_learn = names(visitorReward)[1],
is_reward_are_boolean = TRUE,
ctree_control_val=ctree_control(
mincriterion = 0.99,
testtype = "Teststatistic",
teststat = "quadratic",
splitstat = c( "quadratic"))
)
my_ctree_ucb <- ctreeucbBanditObjectEvaluation(dt= dt.old,visitor_reward=visitorReward, ctree_parameters_control= ctreeucb_parameters_control)
library(bandit4abtest)
library(partykit)
###Data format###
df  =  read.table("/home/manue/Documents/manue/GitHub/R-CTree-UCB/bandit4abtest/data/adult.data", sep = ",")  # read text file
df$V1 <- NULL
listCategorial =c("V2","V4","V6","V7","V8","V9")
listInteger  = c("V3","V5","V11","V12","V13")
visitorReward <- as.data.frame(transform_categorial_to_binary( listCategorial = c("V15"), dt=df))
for(i in 1:ncol(visitorReward)) visitorReward[,i] <- as.integer(visitorReward[,i])
###
dt <- df[, c(listCategorial,listInteger)]
dt$V15 <- NULL
#multiply the dataset (if Config 100_100)
n <- 2
dt <- do.call("rbind", replicate(n, dt, simplify = FALSE))
visitorReward  <- do.call("rbind", replicate(n, visitorReward, simplify = FALSE))
dt.old <- dt
set.seed(1234)
#multiply the dataset if Config 100_100
#Config 100_100
learn_size = nrow(dt.old)*0.5
ctreeucb_parameters_control <- ctreeucb_parameters_control_default(dt = dt.old,
visitorReward ,
learn_size = learn_size,
alpha = 1,
arm_for_learn = names(visitorReward)[1],
is_reward_are_boolean = TRUE,
ctree_control_val=ctree_control(
mincriterion = 0.99,
testtype = "Teststatistic",
teststat = "quadratic",
splitstat = c( "quadratic"))
)
my_ctree_ucb <- ctreeucbBanditObjectEvaluation(dt= dt.old,visitor_reward=visitorReward, ctree_parameters_control= ctreeucb_parameters_control)
max(my_ctree_ucb$cum_reg_ctree)
###Data format###
###Other algorithms require binary or continuous variables.
dt <- transform_categorial_to_binary( listCategorial =listCategorial ,listInteger=listInteger, dt=dt)
first <- my_ctree_ucb$ctreeucb_bandit_alloc$first_train_element
last <- nrow(dt)
dt <- dt[first:last,]
visitorReward <- visitorReward[first:last,]
my_linucb_ucb <- LinucbBanditObjectEvaluation(dt=dt, visitor_reward=visitorReward)
max(my_linucb_ucb$cum_reg_linucb)
### Kernel UCB ###
kernel_ucb <-  kernelucbBanditObjectEvaluation(dt=dt, visitor_reward=visitorReward)
max(kernel_ucb$cum_reg_kernelucb)
### Random ###
unif_alloc <- uniform_bandit_object_evaluation(visitor_reward=visitorReward)
max(unif_alloc$cum_reg_uniform_bandit_alloc)
### UCB ###
ucb_alloc <-  UcbBanditObjectEvaluation(visitor_reward=visitorReward,alpha = 1)
max(ucb_alloc$cum_reg_ucb_alloc)
###PLOT WITH GGPLOT2 REGRET###
library(ggplot2)
comp_reg <- data.frame(cbind(my_ctree_ucb$cum_reg_ctree,
ucb_alloc$cum_reg_ucb_alloc,
my_linucb_ucb$cum_reg_linucb,
kernel_ucb$cum_reg_kernelucb,
unif_alloc$cum_reg_uniform_bandit_alloc))
ggplot(comp_reg, aes(c(1:nrow(comp_reg)), y = value, color = Algorithm)) +
geom_line(linetype="dashed",aes(y = my_ctree_ucb$cum_reg_ctree, col = "Ctreeucb"),size = 0.5) +
geom_line(linetype="dashed",aes(y = ucb_alloc$cum_reg_ucb_alloc, col = "UCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = my_linucb_ucb$cum_reg_linucb, col = "LinUCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = kernel_ucb$cum_reg_kernelucb, col = "KernelUCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = unif_alloc$cum_reg_uniform_bandit_alloc, col = "Uniform"),size = 0.5) +
scale_colour_manual(values =  c("UCB"="brown","LinUCB"="blue","KernelUCB"="red","Ctreeucb"="green","Uniform"="black"))+
xlab("Time") +
ylab("Cumulative Regret")
View(dt)
View(dt)
####Configuration
#Conf_30/70
config <- "30_70"
df <- abtest1
#Conf_100/100
#config <- "100_100"
#df <-  abtest2
df$langID <- as.factor(df$langID)
df$countryID <- as.factor(df$countryID)
listCategorial =c("countryID","langID","name","device","userAgent")
listInteger  = c("latitude","longitude")
#Results for each variation
visitorReward <- df[,c("A","B")]
#Items caracteristics
dt <- df[, c(listCategorial,listInteger)]
set.seed(1234)
dt.old <- dt
if(config  == "100_100" ) learn_size = 6216
if(config  ==  "30_70"  ) learn_size = 1865
####CTREEUCBPARAMETER
## - the size of the learning set is already calculated according to the selected configuration (learn_size)
#  - mincriterion parameter refers to 1 -risk error accepted  (0.99,0.95,0.90)
#  - alpha refers to the dynamic allocation parameter (U.C.B)
#  - arm_for_learn is the original varitation (names(visitorReward)[1] or names(visitorReward)[2])
#  testtype and teststat is refer to type of test to build the tree (see the paper for more details)
# and are not supposed to be modified#
ctreeucb_parameters_control <- ctreeucb_parameters_control_default(dt = dt.old,
visitorReward ,
learn_size = learn_size,
alpha = 1,
arm_for_learn = names(visitorReward)[1],
is_reward_are_boolean = TRUE,
ctree_control_val=ctree_control(
mincriterion = 0.95,
testtype = "Teststatistic",
teststat = "quadratic",
splitstat = c( "quadratic"))
)
my_ctree_ucb <- ctreeucbBanditObjectEvaluation(dt= dt.old,visitor_reward=visitorReward, ctree_parameters_control= ctreeucb_parameters_control)
max(my_ctree_ucb$cum_reg_ctree)
###END CTREE UCB###
###Data format###
###Other algorithms require binary or continuous variables.
dt <- transform_categorial_to_binary( listCategorial =listCategorial ,listInteger=listInteger, dt=dt)
first <- my_ctree_ucb$ctreeucb_bandit_alloc$first_train_element
last <- nrow(dt)
dt <- dt[first:last,]
visitorReward <- visitorReward[first:last,]
my_linucb_ucb <- LinucbBanditObjectEvaluation(dt=dt, visitor_reward=visitorReward)
max(my_linucb_ucb$cum_reg_linucb)
### END Lin UCB ###
### Kernel UCB ###
kernel_ucb <-  kernelucbBanditObjectEvaluation(dt=dt, visitor_reward=visitorReward)
max(kernel_ucb$cum_reg_kernelucb)
### END Kernel UCB ###
### Random ###
unif_alloc <- uniform_bandit_object_evaluation(visitor_reward=visitorReward)
max(unif_alloc$cum_reg_uniform_bandit_alloc)
### END RANDOM ###
### UCB ###
ucb_alloc <-  UcbBanditObjectEvaluation(visitor_reward=visitorReward,alpha = 1)
max(ucb_alloc$cum_reg_ucb_alloc)
###END UCB###
### PLOT  OF REGRET###
###PLOT WITH GGPLOT2 REGRET###
library(ggplot2)
comp_reg <- data.frame(cbind(my_ctree_ucb$cum_reg_ctree,
ucb_alloc$cum_reg_ucb_alloc,
my_linucb_ucb$cum_reg_linucb,
kernel_ucb$cum_reg_kernelucb,
unif_alloc$cum_reg_uniform_bandit_alloc))
ggplot(comp_reg, aes(c(1:nrow(comp_reg)), y = value, color = Algorithm)) +
geom_line(linetype="dashed",aes(y = my_ctree_ucb$cum_reg_ctree, col = "Ctreeucb"),size = 0.5) +
geom_line(linetype="dashed",aes(y = ucb_alloc$cum_reg_ucb_alloc, col = "UCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = my_linucb_ucb$cum_reg_linucb, col = "LinUCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = kernel_ucb$cum_reg_kernelucb, col = "KernelUCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = unif_alloc$cum_reg_uniform_bandit_alloc, col = "Uniform"),size = 0.5) +
scale_colour_manual(values =  c("UCB"="brown","LinUCB"="blue","KernelUCB"="red","Ctreeucb"="green","Uniform"="black"))+
xlab("Time") +
ylab("Cumulative Regret")
df  =  read.csv2("/home/manue/Documents/manue/GitHub/R-CTree-UCB/bandit4abtest/data/movielens.data",sep=";",header = TRUE)
df$X = NULL
dt <- df[,1:19]
visitorReward <- df[,c(20:24)]
###Statistics
temp <-as.data.frame( c(visitorReward[,1] ,visitorReward[,2] ,visitorReward[,3] ,visitorReward[,4], visitorReward[,5] ) )
temp$user <- "0"
temp$user[1:9125] <- "A"
temp$user[9125: 18250] <- "B"
temp$user[18250:27375] <- "C"
temp$user[27375:36500] <- "D"
temp$user[36500:45625] <- "E"
colnames(temp) <- c("valeur","variation")
ajuste <- lm(temp$valeur ~ temp$variation)
summary(ajuste)
anova(ajuste)
a1 <- aov(temp$valeur ~ temp$variation)
posthoc <- TukeyHSD(x=a1, 'temp$variation', conf.level=0.95)
posthoc
#multiply the dataset if Config 100_1OO
n <- 2
dt <- do.call("rbind", replicate(n, dt, simplify = FALSE))
visitorReward  <- do.call("rbind", replicate(n, visitorReward, simplify = FALSE))
dt.old <- dt
set.seed(1234)
####CTREEUCBPARAMETER
## - the size of the learning set is a percent of the all dataset nrow(dt)*0.3 or nrow(dt)*0.5
#  - mincriterion parameter refers to 1 -risk error accepted  (0.99,0.95,0.90)
#  - alpha refers to the dynamic allocation parameter (U.C.B)
#  - arm_for_learn is the original varitation (names(visitorReward)[1] or names(visitorReward)[2] ...or  names(visitorReward)[5] )
#  testtype and teststat is refer to type of test to build the tree (see the paper for more details)
# and are not supposed to be modified#
#Do not multiply the dataset if Config 30_70
#Config 30_70
#learn_size = nrow(dt.old)*0.30
#multiply the dataset if Config 100_100
#Config 100_100
learn_size = nrow(dt.old)*0.5
####CTREEUCBPARAMETER
## - the size of the learning set is already calculated according to the selected configuration (learn_size)
#  - mincriterion parameter refers to 1 -risk error accepted  (0.99,0.95,0.90)
#  - alpha refers to the dynamic allocation parameter (U.C.B)
#  - arm_for_learn is the original varitation (names(visitorReward)[1] or names(visitorReward)[2])
#  testtype and teststat is refer to type of test to build the tree (see the paper for more details)
# and are not supposed to be modified#
library(partykit)
ctreeucb_parameters_control <- ctreeucb_parameters_control_default(dt = dt.old,
visitorReward ,
learn_size = learn_size,
alpha = 1,
arm_for_learn = names(visitorReward)[5],
is_reward_are_boolean = FALSE,
ctree_control_val=ctree_control(
mincriterion = 0.95,
testtype = "Teststatistic",
teststat = "quadratic"
)
)
my_ctree_ucb <- ctreeucbBanditObjectEvaluation(dt= dt.old,visitor_reward=visitorReward, ctree_parameters_control= ctreeucb_parameters_control)
max(my_ctree_ucb$cum_reg_ctree)
###END CTREE UCB###
first <- my_ctree_ucb$ctreeucb_bandit_alloc$first_train_element
last <- nrow(dt)
dt <- dt[first:last,]
visitorReward <- visitorReward[first:last,]
my_linucb_ucb <- LinucbBanditObjectEvaluation(dt=dt, visitor_reward=visitorReward)
max(my_linucb_ucb$cum_reg_linucb)
### END Lin UCB ###
### Kernel UCB ###
dt <- sapply(dt,as.numeric)
kernel_ucb <-  kernelucbBanditObjectEvaluation(dt=dt, visitor_reward=visitorReward)
max(kernel_ucb$cum_reg_kernelucb)
### END Kernel UCB ###
### Random ###
unif_alloc <- uniform_bandit_object_evaluation(visitor_reward=visitorReward)
max(unif_alloc$cum_reg_uniform_bandit_alloc)
### END RANDOM ###
### UCB ###
ucb_alloc <-  UcbBanditObjectEvaluation(visitor_reward=visitorReward,alpha = 1)
max(ucb_alloc$cum_reg_ucb_alloc)
###END UCB###
### PLOT  OF REGRET###
###PLOT WITH GGPLOT2 REGRET###
library(ggplot2)
comp_reg <- data.frame(cbind(my_ctree_ucb$cum_reg_ctree,
ucb_alloc$cum_reg_ucb_alloc,
my_linucb_ucb$cum_reg_linucb,
kernel_ucb$cum_reg_kernelucb,
unif_alloc$cum_reg_uniform_bandit_alloc))
ggplot(comp_reg, aes(c(1:nrow(comp_reg)), y = value, color = Algorithm)) +
geom_line(linetype="dashed",aes(y = my_ctree_ucb$cum_reg_ctree, col = "Ctreeucb"),size = 0.5) +
geom_line(linetype="dashed",aes(y = ucb_alloc$cum_reg_ucb_alloc, col = "UCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = my_linucb_ucb$cum_reg_linucb, col = "LinUCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = kernel_ucb$cum_reg_kernelucb, col = "KernelUCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = unif_alloc$cum_reg_uniform_bandit_alloc, col = "Uniform"),size = 0.5) +
scale_colour_manual(values =  c("UCB"="brown","LinUCB"="blue","KernelUCB"="red","Ctreeucb"="green","Uniform"="black"))+
xlab("Time") +
ylab("Cumulative Regret")
library(bandit4abtest)
library(bandit4abtest)
install.packages("corrr")
install.packages("corrr")
install.packages("corrr")
#vider la mémoire
rm(list=ls())
library("cluster")
library(clue)
USArrests.cr <- scale(USArrests,center=T,scale=T)
kmeans_param <- c(4,5,6 )
kmeans_results <- lapply(kmeans_param, function(m) kmeans(USArrests.cr, centers = m , nstart = 3))
hens <- cl_ensemble(list = kmeans_results)
t <- cl_agreement(hens)
Kclens <- cl_consensus(hens, control = list(k = 4, verbose = TRUE))
# Visualize using corrplot
library(corrplot)
Kclens$.Data[,]
# Visualize using corrplot
library(corr)
# Visualize using corrplot
library(corrr)
Kclens$.Data[,]
corrplot(Kclens$.Data[,], is.corr = FALSE)
Kclens$.Data[,]
library(bandit4abtest)
library(bandit4abtest)
library(jsonlite)
library(bandit4abtest)
library(partykit)
df  =  jsonlite::fromJSON("/home/manue/Documents/manue/Manipulation/datascience-emmanuelle/programme_R/bandit/cheville xp/010-000-030-096/010-000-030-096_5_5_5.JSON", simplifyDataFrame = TRUE)  # read text file
#sampling
library(dplyr)
set.seed(1234)
df <- sample_n(df ,nrow(df))
listCategorial =c("clusterV6","clusterV7")
listInteger  = c()
dt <- df[,listCategorial]
visitorReward <- as.data.frame(transform_categorial_to_binary( listCategorial = c("etat"), dt=df))
for(i in listCategorial) dt[,i] <- as.factor(dt[,i])
summary(dt)
summary(visitorReward)
dt.old <- dt
#Do not multiply the dataset if Config 30_70
#Config 30_70
learn_size = nrow(dt.old)*0.30
ctreeucb_parameters_control <- ctreeucb_parameters_control_default(dt = dt.old,
visitorReward ,
learn_size = learn_size,
alpha = 1,
arm_for_learn = names(visitorReward)[10],
is_reward_are_boolean = TRUE,
ctree_control_val=ctree_control(
mincriterion = 0.95,
testtype = "Bonferroni",
teststat = "quadratic",
splitstat = c( "quadratic"))
)
my_ctree_ucb <- ctreeucbBanditObjectEvaluation(dt= dt.old,visitor_reward=visitorReward, ctree_parameters_control= ctreeucb_parameters_control, average = TRUE)
max(my_ctree_ucb$cum_reg_ctree)
###Data format###
###Other algorithms require binary or continuous variables.
dt <- transform_categorial_to_binary( listCategorial = listCategorial, dt=dt)
#colnames(dt) <- paste(rep("col",74),as.character(c(1:74)) ,sep="")
first <- my_ctree_ucb$ctreeucb_bandit_alloc$first_train_element
last <- nrow(dt)
dt <- dt[first:last,]
dt.reward <- dt.old[first:last,]
visitorReward <- visitorReward[first:last,]
my_linucb_ucb <- LinucbBanditObjectEvaluation(dt=dt, visitor_reward=visitorReward,alpha =1,average = TRUE, IsRewardAreBoolean = TRUE,dt.reward=dt.reward)
#'arm_2 <-  as.vector(c(-1,2,1,0))
#'K2 = crossprod(t(dt),arm_2)
#'arm_3 <-  as.vector(c(-1,-5,1,10))
#'K3 = crossprod(t(dt),arm_3)
#'visitor_reward <-  data.frame(K1,K2,K3)
#'dt <- as.data.frame(dt)
#'ReturnRealTheta(dt,visitor_reward)
#'@import stats
#'@export
#
ReturnRealTheta <- function(dt, visitor_reward,option="linear") {
K <- ncol(visitor_reward)
n_f <- ncol(dt)
#creat th object
th = array(0, c(K,n_f))
colnames(th) <- colnames(dt)
rownames(th) <- colnames(visitor_reward)
#tempory variable
temp <- as.data.frame(dt)
if (option=="linear") {
for (i in 1:K) {
temp$prediction <- visitor_reward[,i]
linearMod <- lm(prediction ~. , data = temp)  # build linear regression model on full data
#intercept is not save
th[i,] <- linearMod$coefficients[-1]
temp$prediction <- NULL
}
}
if (option=="logit") {
for (i in 1:K) {
temp$prediction <- visitor_reward[,i]
logitMod <- glm(prediction ~. , family=binomial(link='logit'), data = temp)  # build linear regression model on full data
#intercept is not save
th[i,] <- logitMod$coefficients[-1]
temp$prediction <- NULL
}
}
return ('th'=th)
}
my_linucb_ucb <- LinucbBanditObjectEvaluation(dt=dt, visitor_reward=visitorReward,alpha =1,average = TRUE, IsRewardAreBoolean = TRUE,dt.reward=dt.reward)
my_linucb_ucb <- LinucbBanditObjectEvaluation(dt=dt, visitor_reward=visitorReward,alpha =1,average = TRUE, IsRewardAreBoolean = TRUE,dt.reward=dt.reward)
library(bandit4abtest)
library(bandit4abtest)
?ReturnRealTheta
size.tot = 1000
set.seed(4649)                          # this makes the example exactly reproducible
x1 = runif(size.tot, min=0, max=10)          # you have 4, largely uncorrelated predictors
x2 = runif(size.tot, min=0, max=10)
x3 = runif(size.tot, min=0, max=10)
x4 = runif(size.tot, min=0, max=10)
dt = cbind(x1,x2,x3,x4)
#arm reward
arm_1 <-  as.vector(c(-1,9,-8,4))
K1 = crossprod(t(dt),arm_1)
arm_2 <-  as.vector(c(-1,2,1,0))
K2 = crossprod(t(dt),arm_2)
arm_3 <-  as.vector(c(-1,-5,1,10))
K3 = crossprod(t(dt),arm_3)
visitor_reward <-  data.frame(K1,K2,K3)
dt <- as.data.frame(dt)
ReturnRealTheta(dt,visitor_reward)
