ucb
}
hist(pulled)
sum(rewards)
regret = matrix(rep(0,Time), ncol=1)
Time.tot = 1:Time
mu_star = max(  exp(-diag(D%*%t(D)))   )
regret = mu_star*t(Time.tot) - cumsum(rewards)
plot(cumsum(as.vector(regret)))
duplicate_opt=FALSE,
duplicate_opt=FALSE
opt=2
visitorReward <- jsonlite::fromJSON("/home/manue/Documents/parcours3reward.JSON", simplifyDataFrame = TRUE)
View(visitorReward)
source("/home/manue/Documents/manue/Manipulation/datascience-emmanuelle/programme_R/bandit/bandit_tempo/tentative/linucb_rejection.R")
source("/home/manue/Documents/manue/Manipulation/datascience-emmanuelle/programme_R/bandit/bandit_tempo/tentative/cluster_ab_tasty_modz.R")
duplicate_opt=FALSE
visitorReward <- jsonlite::fromJSON("/home/manue/Documents/parcours3reward.JSON", simplifyDataFrame = TRUE)
visitorReward <- visitorReward [ visitorReward $fullVisitorId %in% data.train$fullVisitorId, ]
source("/home/manue/Documents/manue/Manipulation/datascience-emmanuelle/programme_R/bandit/xp ctree_ucb/programme général/Formating data/R/transform_categorial_to_binary.R")
###Sampling
data.train <- data.train[sample(1:nrow(data.train),nrow(data.train)),]
###
total <- merge(data.train ,visitorReward, by="fullVisitorId")
setwd( getwd() )
#setwd( getwd() )
# the following line is for getting the path of your current open file
current_path <-  getwd()
source(paste(current_path,'/install_package.R',sep=""))
#setwd( getwd() )
# the following line is for getting the path of your current open file
current_path <-  getwd()
setwd("~/Documents/manue/thèse/icml/97217f13-3651-49c7-8bb4-c5ae8d361a72/code")
#setwd( getwd() )
# the following line is for getting the path of your current open file
current_path <-  getwd()
current_path
source(paste(current_path,'/install_package.R',sep=""))
source(paste(current_path,'/Formating data/R/transform_categorial_to_binary.R',sep=""))
####Configuration
#Conf_30/70
config <- "30_70"
df <- read.csv(paste(current_path,"/Data/ab_test_dataset_0_3",sep=""),sep=",")
#Conf_100/100
config <- "100_100"
setwd("~/Documents/manue/thèse/icml/97217f13-3651-49c7-8bb4-c5ae8d361a72/code")
df <- read.csv(paste(current_path,"/Data/ab_test_dataset_0_5",sep=""),sep=",")
###Data format###
df$X <- NULL
df$hastrans <- NULL
df$variationID.y <- NULL
df$langID <- as.factor(df$langID)
df$countryID <- as.factor(df$countryID)
listCategorial =c("countryID","langID","name","device","userAgent")
listInteger  = c("latitude","longitude")
#Results for each variation
visitorReward <- df[,c("A","B")]
#Items caracteristics
dt <- df[, c(listCategorial,listInteger)]
set.seed(1234)
source("Bandit/R/ctree_object_evaluation.R")
dt.old <- dt
if(config  == "100_100" ) learn_size = 6216
if(config  ==  "30_70"  ) learn_size = 1865
ctree_parameters_control <- ctree_parameters_control_default(dt = dt.old,
visitorReward ,
learn_size = learn_size,
alpha = 1,
arm_for_learn = names(visitorReward)[1],
is_reward_are_boolean = TRUE,
ctree_control_val=ctree_control(
mincriterion = 0.99,
testtype = "Teststatistic",
teststat = "quadratic",
splitstat = c( "quadratic"))
)
my_ctree_ucb <- ctree_object_evaluation(dt= dt.old,visitorReward=visitorReward, ctree_parameters_control= ctree_parameters_control)
max(my_ctree_ucb$cum_reg_ctree)
ctree_parameters_control <- ctree_parameters_control_default(dt = dt.old,
visitorReward ,
learn_size = learn_size,
alpha = 1,
arm_for_learn = names(visitorReward)[1],
is_reward_are_boolean = TRUE,
ctree_control_val=ctree_control(
mincriterion = 0.99,
testtype = "Teststatistic",
teststat = "quadratic",
splitstat = c( "quadratic"))
)
my_ctree_ucb <- ctree_object_evaluation(dt= dt.old,visitorReward=visitorReward, ctree_parameters_control= ctree_parameters_control)
View(CTREE)
View(ctree_object_evaluation)
View(CTREE)
View(ctree_data_control)
View(ctree_data_control)
View(ctree_object_evaluation)
View(ctree_object_evaluation)
View(change_data_type_for_ctree)
View(change_data_type_for_ctree)
View(CTREE)
View(CTREE)
View(ctree_object_evaluation)
source("Bandit/R/ctree_parameters_control_default.R")
source("Bandit/R/CTREE.R")
source("Bandit/R/regret.R")
dt= dt.old,
dt= dt.old
ctree_res <- CTREE(dt,visitorReward,ctree_parameters_control)
View(CTREE)
source("Bandit/R/ctree_parameters_control_default.R")
set.seed(4321)
#set to file directory
(WD <- getwd())
if (!is.null(WD)) setwd(WD)
### control ###
#data controle : see ctree_control
source("Bandit/R/ctree_control.R")
control <- ctree_data_control(dt,visitorReward,ctree_parameters_control$is_reward_are_boolean) #data controle : need a context and reward data of same size
if(control$control == FALSE) return(paste("Error,",control$message,sep=""))
#Change the type of data
source("Bandit/R/change_data_type_for_ctree.R")
temp <- change_data_type_for_ctree(dt,ctree_parameters_control$is_reward_are_boolean,visitorReward)
dt <- temp$dt
#if reward is boolean, data will be modify temporary
temp.visitorReward <- temp$visitorReward
### learning  ###
#Generate formula and tree
source("Bandit/R/ctree_formula_generate.R")
ctree_tree <- ctree_formula_generate(dt = dt,visitorReward = temp.visitorReward,
ctree_control_val = ctree_parameters_control$ctree_control_val,
arm_for_learn = ctree_parameters_control$arm_for_learn,explanatory_variable= ctree_parameters_control$explanatory_variable,learn_size = ctree_parameters_control$learn_size)
#return to regular data
visitorReward <- visitorReward
### learning  ###
#Generate formula and tree
source("Bandit/R/ctree_formula_generate.R")
View(ctree_formula_generate)
setwd("~/")
setwd("~/Documents/manue/thèse/icml/97217f13-3651-49c7-8bb4-c5ae8d361a72/code")
#setwd("~/user_name_directory/97217f13-3651-49c7-8bb4-c5ae8d361a72/code"))
# the following line is for getting the path of your current open file
current_path <-  getwd()
source(paste(current_path,'/install_package.R',sep=""))
source(paste(current_path,'/Formating data/R/transform_categorial_to_binary.R',sep=""))
####Configuration
#Conf_30/70
config <- "30_70"
df <- read.csv(paste(current_path,"/Data/ab_test_dataset_0_3",sep=""),sep=",")
#Conf_100/100
config <- "100_100"
df <- read.csv(paste(current_path,"/Data/ab_test_dataset_0_5",sep=""),sep=",")
###Data format###
df$X <- NULL
df$hastrans <- NULL
df$variationID.y <- NULL
df$langID <- as.factor(df$langID)
df$countryID <- as.factor(df$countryID)
listCategorial =c("countryID","langID","name","device","userAgent")
listInteger  = c("latitude","longitude")
#Results for each variation
visitorReward <- df[,c("A","B")]
#Items caracteristics
dt <- df[, c(listCategorial,listInteger)]
set.seed(1234)
source("Bandit/R/ctree_object_evaluation.R")
dt.old <- dt
if(config  == "100_100" ) learn_size = 6216
if(config  ==  "30_70"  ) learn_size = 1865
ctree_parameters_control <- ctree_parameters_control_default(dt = dt.old,
visitorReward ,
learn_size = learn_size,
alpha = 1,
arm_for_learn = names(visitorReward)[1],
is_reward_are_boolean = TRUE,
ctree_control_val=ctree_control(
mincriterion = 0.99,
testtype = "Teststatistic",
teststat = "quadratic",
splitstat = c( "quadratic"))
)
my_ctree_ucb <- ctree_object_evaluation(dt= dt.old,visitorReward=visitorReward, ctree_parameters_control= ctree_parameters_control)
####Configuration
#Conf_30/70
config <- "30_70"
df <- read.csv(paste(current_path,"/Data/ab_test_dataset_0_3",sep=""),sep=",")
###Data format###
df$X <- NULL
df$hastrans <- NULL
df$variationID.y <- NULL
df$langID <- as.factor(df$langID)
df$countryID <- as.factor(df$countryID)
listCategorial =c("countryID","langID","name","device","userAgent")
listInteger  = c("latitude","longitude")
#Results for each variation
visitorReward <- df[,c("A","B")]
#Items caracteristics
dt <- df[, c(listCategorial,listInteger)]
set.seed(1234)
source("Bandit/R/ctree_object_evaluation.R")
dt.old <- dt
if(config  == "100_100" ) learn_size = 6216
if(config  ==  "30_70"  ) learn_size = 1865
learn_size
ctree_parameters_control <- ctree_parameters_control_default(dt = dt.old,
visitorReward ,
learn_size = learn_size,
alpha = 1,
arm_for_learn = names(visitorReward)[1],
is_reward_are_boolean = TRUE,
ctree_control_val=ctree_control(
mincriterion = 0.95,
testtype = "Teststatistic",
teststat = "quadratic",
splitstat = c( "quadratic"))
)
my_ctree_ucb <- ctree_object_evaluation(dt= dt.old,visitorReward=visitorReward, ctree_parameters_control= ctree_parameters_control)
max(my_ctree_ucb$cum_reg_ctree)
###Data format###
###Other algorithms require binary or continuous variables.
dt <- transform_categorial_to_binary( listCategorial =listCategorial ,listInteger=listInteger, dt=dt)
### Lin UCB ###
source("Bandit/R/linucb_object_evaluation.R")
linucb_parameters_control_par =linucb_parameters_control_default(dt,visitorReward,alpha = 1)
my_linucb_ucb <-  linucb_object_evaluation(dt=dt[c(my_ctree_ucb$ctree_res$first_train_element:nrow(dt)),],
visitorReward=visitorReward[c(my_ctree_ucb$ctree_res$first_train_element:nrow(visitorReward)),],
linucb_parameters_control = linucb_parameters_control_par)
max(my_linucb_ucb$cum_reg_linucb)
### Kernel UCB ###
source("Bandit/R/kernelucb_object_evaluation.R")
kernel_ucb <- kernel_object_evaluation(dt=dt[c(my_ctree_ucb$ctree_res$first_train_element:nrow(dt)),],
visitorReward=visitorReward[c(my_ctree_ucb$ctree_res$first_train_element:nrow(visitorReward)),],
linucb_parameters_control=linucb_parameters_control_default(dt,visitorReward),
update_val= 100, alpha=1)
max(kernel_ucb$cum_reg_kernelucb)
### Random ###
source("Bandit/R/random_bandit_object_evaluation.R")
random_alloc <- random_bandit_object_evaluation(visitorReward=visitorReward[c(my_ctree_ucb$ctree_res$first_train_element:nrow(visitorReward)),])
max(random_alloc$cum_reg_random_alloc)
### UCB ###
source("Bandit/R/ucb_bandit_object_evaluation.R")
ucb_alloc <- ucb_bandit_object_evaluation(visitorReward=visitorReward[c(my_ctree_ucb$ctree_res$first_train_element:nrow(visitorReward)),],alpha = 1)
max(ucb_alloc$cum_reg_ucb_alloc)
plot(c(1:length(my_ctree_ucb$cum_reg_ctree)), my_ctree_ucb$cum_reg_ctree, type = "l")
lines(c(1:length(my_linucb_ucb$cum_reg_linucb)),my_linucb_ucb$cum_reg_linucb, col = "red")
lines(c(1:length(kernel_ucb$cum_reg_kernelucb)),kernel_ucb$cum_reg_kernelucb, col = "orange")
lines(c(1:length(random_alloc$cum_reg_random_alloc)),random_alloc$cum_reg_random_alloc, col = "violet")
lines(c(1:length(ucb_alloc$cum_reg_ucb_alloc)),ucb_alloc$cum_reg_ucb_alloc, col = "blue")
###PLOT WITH GGPLOT2 REGRET###
library(ggplot2)
comp_reg <- data.frame(cbind(my_ctree_ucb$cum_reg_ctree,
ucb_alloc$cum_reg_ucb_alloc,
my_linucb_ucb$cum_reg_linucb,
kernel_ucb$cum_reg_kernelucb,
random_alloc$cum_reg_random_alloc))
pdf('../results/cumRegret.pdf')
ggplot(comp_reg, aes(c(1:nrow(comp_reg)), y = value, color = Algorithm)) +
geom_line(linetype="dashed",aes(y = my_ctree_ucb$cum_reg_ctree, col = "CTREE"),size = 0.5) +
geom_line(linetype="dashed",aes(y = ucb_alloc$cum_reg_ucb_alloc, col = "UCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = my_linucb_ucb$cum_reg_linucb, col = "LinUCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = kernel_ucb$cum_reg_kernelucb, col = "KernelUCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = random_alloc$cum_reg_random_alloc, col = "Random"),size = 0.5) +
xlab("Time") +
ylab("Regret")
dev.off()
ggplot(comp_reg, aes(c(1:nrow(comp_reg)), y = value, color = Algorithm)) +
geom_line(linetype="dashed",aes(y = my_ctree_ucb$cum_reg_ctree, col = "CTREE"),size = 0.5) +
geom_line(linetype="dashed",aes(y = ucb_alloc$cum_reg_ucb_alloc, col = "UCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = my_linucb_ucb$cum_reg_linucb, col = "LinUCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = kernel_ucb$cum_reg_kernelucb, col = "KernelUCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = random_alloc$cum_reg_random_alloc, col = "Random"),size = 0.5) +
xlab("Time") +
ylab("Regret")
###plot cum regret for each subgroupe of ctreeucb ###
plot_cum_regret_for_each_subgroupe <- function(ctree_ucb_object, K=ncol(visitorReward)){
dt <- ctree_ucb_object$ctree_res$data_context
choice <- dt$choice
visitorReward <- dt[,c((ncol(dt)-K+1):ncol(dt)),K]
source("Bandit/R/regret.R")
print(length(levels(as.factor(dt$groups))))
for(i in levels(as.factor(dt$groups))){
print(i)
temp_choice  <- dt[dt$groups == i,]$choice
temp_visitor_reward <- visitorReward[dt$groups == i,]
temp_cum_reg <- cumulativeRegret(temp_choice,temp_visitor_reward)
pdf(paste("../results/cumulative regret for subgroup ",i,".pdf",sep = ""))
plot(temp_cum_reg, type ='l', ylab = paste("cumulative regret for subgroup ",i,sep = ""))
dev.off()
temp_choice  <- NULL
temp_visitor_reward   <- NULL
temp_cum_reg   <- NULL
}
}
###plot cum regret for each subgroupe of ctreeucb ###
plot_cum_regret_for_each_subgroupe <- function(ctree_ucb_object, K=ncol(visitorReward)){
dt <- ctree_ucb_object$ctree_res$data_context
choice <- dt$choice
visitorReward <- dt[,c((ncol(dt)-K+1):ncol(dt)),K]
source("Bandit/R/regret.R")
print(length(levels(as.factor(dt$groups))))
for(i in levels(as.factor(dt$groups))){
print(i)
temp_choice  <- dt[dt$groups == i,]$choice
temp_visitor_reward <- visitorReward[dt$groups == i,]
temp_cum_reg <- cumulativeRegret(temp_choice,temp_visitor_reward)
#   pdf(paste("../results/cumulative regret for subgroup ",i,".pdf",sep = ""))
plot(temp_cum_reg, type ='l', ylab = paste("cumulative regret for subgroup ",i,sep = ""))
#    dev.off()
temp_choice  <- NULL
temp_visitor_reward   <- NULL
temp_cum_reg   <- NULL
}
}
plot_cum_regret_for_each_subgroupe(my_ctree_ucb, K=ncol(visitorReward))
#cumulative regret
max(my_ctree_ucb$cum_reg_ctree)
max(my_linucb_ucb$cum_reg_linucb)
max(ucb_alloc$cum_reg_ucb_alloc)
max(kernel_ucb$cum_reg_kernelucb)
max(random_alloc$cum_reg_random_alloc)
#setwd( getwd() )
# the following line is for getting the path of your current open file
current_path <-  getwd()
source(paste(current_path,'/install_package.R',sep=""))
source(paste(current_path,'/Formating data/R/transform_categorial_to_binary.R',sep=""))
memory.limit(size = 2500)
###Data format###
df  = read.table(paste(current_path,"/Data/adult.data",sep=""), sep = ",")  # read text file
df$V1 <- NULL
listCategorial =c("V2","V4","V6","V7","V8","V9")
listInteger  = c("V3","V5","V11","V12","V13")
visitorReward <- as.data.frame(transform_categorial_to_binary( listCategorial = c("V15"), dt=df))
for(i in 1:ncol(visitorReward)) visitorReward[,i] <- as.integer(visitorReward[,i])
###
dt <- df[, c(listCategorial,listInteger)]
dt$V15 <- NULL
#multiply the dataset (if Config 100_100)
n <- 2
dt <- do.call("rbind", replicate(n, dt, simplify = FALSE))
visitorReward  <- do.call("rbind", replicate(n, visitorReward, simplify = FALSE))
###File path
(WD <- getwd())
if (!is.null(WD)) setwd(WD)
source("Bandit/R/ctree_object_evaluation.R")
dt.old <- dt
set.seed(1234)
#Do not multiply the dataset if Config 30_70
#Config 30_70
learn_size = nrow(dt.old)*0.30
#multiply the dataset if Config 100_100
#Config 100_100
learn_size = nrow(dt.old)*0.5
ctree_parameters_control <- ctree_parameters_control_default(dt = dt.old,
visitorReward ,
learn_size = learn_size,
alpha = 1,
arm_for_learn = names(visitorReward)[2],
is_reward_are_boolean = TRUE,
ctree_control_val=ctree_control(
mincriterion = 0.95,
testtype = "MonteCarlo",
teststat = "maximum"
)
)
my_ctree_ucb <- ctree_object_evaluation(dt= dt.old,visitorReward=visitorReward, ctree_parameters_control= ctree_parameters_control)
max(my_ctree_ucb$cum_reg_ctree)
###Data format###
###Other algorithms require binary or continuous variables.
dt <- transform_categorial_to_binary( listCategorial =listCategorial ,listInteger=listInteger, dt=dt)
### Lin UCB ###
source("Bandit/R/linucb_object_evaluation.R")
linucb_parameters_control_par =linucb_parameters_control_default(dt,visitorReward,alpha = 1)
my_linucb_ucb <-  linucb_object_evaluation(dt=dt[c(my_ctree_ucb$ctree_res$first_train_element:nrow(dt)),],
visitorReward=visitorReward[c(my_ctree_ucb$ctree_res$first_train_element:nrow(visitorReward)),],
linucb_parameters_control = linucb_parameters_control_par)
max(my_linucb_ucb$cum_reg_linucb)
source("Bandit/R/kernelucb_object_evaluation.R")
kernel_ucb <- kernel_object_evaluation(dt=dt[c(my_ctree_ucb$ctree_res$first_train_element:nrow(dt)),],
visitorReward=visitorReward[c(my_ctree_ucb$ctree_res$first_train_element:nrow(visitorReward)),],
linucb_parameters_control=linucb_parameters_control_default(dt,visitorReward),
update_val= 100,
alpha=1)
max(kernel_ucb$cum_reg_kernelucb)
### Random ###
source("Bandit/R/random_bandit_object_evaluation.R")
random_alloc <- random_bandit_object_evaluation(visitorReward=visitorReward[c(my_ctree_ucb$ctree_res$first_train_element:nrow(visitorReward)),])
### UCB ###
source("Bandit/R/ucb_bandit_object_evaluation.R")
ucb_alloc <- ucb_bandit_object_evaluation(visitorReward=visitorReward[c(my_ctree_ucb$ctree_res$first_train_element:nrow(visitorReward)),],alpha = 1)
max(ucb_alloc$cum_reg_ucb_alloc)
### PLOT  OF REGRET###
plot(c(1:length(my_ctree_ucb$cum_reg_ctree)), my_ctree_ucb$cum_reg_ctree, type = "l")
lines(c(1:length(my_linucb_ucb$cum_reg_linucb)),my_linucb_ucb$cum_reg_linucb, col = "red")
lines(c(1:length(kernel_ucb$cum_reg_kernelucb)),kernel_ucb$cum_reg_kernelucb, col = "orange")
lines(c(1:length(random_alloc$cum_reg_random_alloc)),random_alloc$cum_reg_random_alloc, col = "violet")
lines(c(1:length(ucb_alloc$cum_reg_ucb_alloc)),ucb_alloc$cum_reg_ucb_alloc, col = "blue")
max(ucb_alloc$cum_reg_ucb_alloc)
max(my_ctree_ucb$cum_reg_ctree)
max(ucb_alloc$cum_reg_ucb_alloc) - max(my_ctree_ucb$cum_reg_ctree)
###PLOT WITH GGPLOT2 REGRET###
library(ggplot2)
comp_reg <- data.frame(cbind(my_ctree_ucb$cum_reg_ctree,
ucb_alloc$cum_reg_ucb_alloc,
my_linucb_ucb$cum_reg_linucb,
kernel_ucb$cum_reg_kernelucb,
random_alloc$cum_reg_random_alloc))
ggplot(comp_reg, aes(c(1:nrow(comp_reg)), y = value, color = Algorithm)) +
geom_line(linetype="dashed",aes(y = my_ctree_ucb$cum_reg_ctree, col = "CTREE"),size = 0.5) +
geom_line(linetype="dashed",aes(y = ucb_alloc$cum_reg_ucb_alloc, col = "UCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = my_linucb_ucb$cum_reg_linucb, col = "LinUCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = kernel_ucb$cum_reg_kernelucb, col = "KernelUCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = random_alloc$cum_reg_random_alloc, col = "Random"),size = 0.5) +
xlab("Time") +
ylab("Regret")
setwd("~/user_name_directory/97217f13-3651-49c7-8bb4-c5ae8d361a72/code"))
setwd("~/user_name_directory/97217f13-3651-49c7-8bb4-c5ae8d361a72/code")
setwd("~/")
setwd("~/Documents/manue/thèse/icml/97217f13-3651-49c7-8bb4-c5ae8d361a72/code")
# the following line is for getting the path of your current open file
current_path <-  getwd()
source(paste(current_path,'/install_package.R',sep=""))
source(paste(current_path,'/Formating data/R/Movie_formating.R',sep=""))
#multiply the dataset if Config 100_1OO
n <- 2
dt <- do.call("rbind", replicate(n, dt, simplify = FALSE))
visitorReward  <- do.call("rbind", replicate(n, visitorReward, simplify = FALSE))
source("Bandit/R/ctree_object_evaluation.R")
##Data formating for ctree_ucb
temp_dt  <- dt
for(i in 1:ncol(temp_dt  )) temp_dt[,i] <- as.factor(temp_dt[,i])
#Config 100_100
learn_size = nrow(dt)*0.5
ctree_parameter_def <- ctree_parameters_control_default(dt = temp_dt,
visitorReward ,
learn_size = learn_size,
alpha = 0.25,
arm_for_learn= names(visitorReward)[5],
ctree_control_val=ctree_control(
mincriterion = 0.95,
testtype = "Teststatistic",
teststat = "quadratic")
)
my_ctree_ucb <- ctree_object_evaluation(dt= temp_dt,visitorReward=visitorReward, ctree_parameters_control= ctree_parameter_def)
max(my_ctree_ucb$cum_reg_ctree)
### Lin UCB ###
source("Bandit/R/linucb_object_evaluation.R")
linucb_parameters_control_par =linucb_parameters_control_default(dt,visitorReward,alpha = 0.25)
my_linucb_ucb <-  linucb_object_evaluation(dt=dt[c(my_ctree_ucb$ctree_res$first_train_element:nrow(dt)),],
visitorReward=visitorReward[c(my_ctree_ucb$ctree_res$first_train_element:nrow(visitorReward)),],
linucb_parameters_control = linucb_parameters_control_par)
max(my_linucb_ucb$cum_reg_linucb)
source("Bandit/R/kernelucb_object_evaluation.R")
kernel_ucb <- kernel_object_evaluation(dt=dt[c(my_ctree_ucb$ctree_res$first_train_element:nrow(dt)),],
visitorReward=visitorReward[c(my_ctree_ucb$ctree_res$first_train_element:nrow(visitorReward)),],
linucb_parameters_control=linucb_parameters_control_default(dt,visitorReward),
update_val= 100,alpha=0.25)
max(kernel_ucb$cum_reg_kernelucb)
### Random ###
source("Bandit/R/random_bandit_object_evaluation.R")
random_alloc <- random_bandit_object_evaluation(visitorReward=visitorReward[c(my_ctree_ucb$ctree_res$first_train_element:nrow(visitorReward)),])
max(random_alloc$cum_reg_random_alloc)
### UCB ###
source("Bandit/R/ucb_bandit_object_evaluation.R")
ucb_alloc <- ucb_bandit_object_evaluation(visitorReward=visitorReward[c(my_ctree_ucb$ctree_res$first_train_element:nrow(visitorReward)),],
alpha = 0.25)
max(ucb_alloc$cum_reg_ucb_alloc)
plot(c(1:length(my_ctree_ucb$cum_reg_ctree)), my_ctree_ucb$cum_reg_ctree, type = "l")
lines(c(1:length(my_linucb_ucb$cum_reg_linucb)),my_linucb_ucb$cum_reg_linucb, col = "red")
lines(c(1:length(kernel_ucb$cum_reg_kernelucb)),kernel_ucb$cum_reg_kernelucb, col = "orange")
lines(c(1:length(random_alloc$cum_reg_random_alloc)),random_alloc$cum_reg_random_alloc, col = "violet")
lines(c(1:length(ucb_alloc$cum_reg_ucb_alloc)),ucb_alloc$cum_reg_ucb_alloc, col = "blue")
###PLOT WITH GGPLOT2 REGRET###
library(ggplot2)
comp_reg <- data.frame(cbind(my_ctree_ucb$cum_reg_ctree,
ucb_alloc$cum_reg_ucb_alloc,
my_linucb_ucb$cum_reg_linucb,
kernel_ucb$cum_reg_kernelucb,
random_alloc$cum_reg_random_alloc))
ggplot(comp_reg, aes(c(1:nrow(comp_reg)), y = value, color = Algorithm)) +
geom_line(linetype="dashed",aes(y = my_ctree_ucb$cum_reg_ctree, col = "CTREE"),size = 0.5) +
geom_line(linetype="dashed",aes(y = ucb_alloc$cum_reg_ucb_alloc, col = "UCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = my_linucb_ucb$cum_reg_linucb, col = "LinUCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = kernel_ucb$cum_reg_kernelucb, col = "KernelUCB"),size = 0.5) +
geom_line(linetype="dashed",aes(y = random_alloc$cum_reg_random_alloc, col = "Random"),size = 0.5) +
xlab("Time") +
ylab("Regret")
###plot cum regret for each subgroupe of ctreeucb ###
plot_cum_regret_for_each_subgroupe <- function(ctree_ucb_object, K=ncol(visitorReward)){
dt <- ctree_ucb_object$ctree_res$data_context
choice <- dt$choice
visitorReward <- dt[,c((ncol(dt)-K+1):ncol(dt)),K]
print(length(levels(as.factor(dt$groups))))
source("Bandit/R/regret.R")
for(i in levels(as.factor(dt$groups))){
temp_choice  <- dt[dt$groups == i,]$choice
temp_visitor_reward <- visitorReward[dt$groups == i,]
temp_cum_reg <- cumulativeRegret(temp_choice,temp_visitor_reward)
#  pdf(paste("../results/cumulative regret for subgroup ",i,".pdf",sep = ""))
plot(temp_cum_reg, type ='l', ylab = paste("cumulative regret for subgroup ",i,sep = ""))
#   dev.off()
temp_choice  <- NULL
temp_visitor_reward   <- NULL
temp_cum_reg   <- NULL
}
}
plot_cum_regret_for_each_subgroupe(my_ctree_ucb, K=ncol(visitorReward))
#cumulative regret
max(my_ctree_ucb$cum_reg_ctree)
max(my_linucb_ucb$cum_reg_linucb)
max(ucb_alloc$cum_reg_ucb_alloc)
max(kernel_ucb$cum_reg_kernelucb)
max(random_alloc$cum_reg_random_alloc)
